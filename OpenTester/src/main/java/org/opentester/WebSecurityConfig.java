package org.opentester;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.security.servlet.PathRequest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.JdbcUserDetailsManager;
import org.springframework.security.provisioning.UserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;


@Configuration
@EnableWebSecurity
public class WebSecurityConfig {
	
//	@Autowired
//	private PasswordEncoder passwordEncoder;
	
//	@Autowired
//	private UserDetailsManager jdbcUserDetailsManager;
	
    @Bean
    public AuthenticationManager authenticationManager(
                                 AuthenticationConfiguration configuration) throws Exception {
        return configuration.getAuthenticationManager();
    }

	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		http.authorizeHttpRequests((requests) -> {
			requests
			
					.requestMatchers(PathRequest.toStaticResources().atCommonLocations()).permitAll()
					.requestMatchers("/", "/home", "/signup", "/userregistration", "/users/", "/test/*")
					.permitAll()
					.requestMatchers("/admin/*", "/admin/rest/*ij").hasRole("ADMIN") 
					.anyRequest().authenticated();
		}
			)
			.formLogin((form) -> form
				.loginPage("/login")
				.defaultSuccessUrl("/")
				.permitAll()
			)
			.logout((logout) -> logout.permitAll());

		return http.build();
	}

//    @Bean
//    public PasswordEncoder passwordEncoder() {
//        return new BCryptPasswordEncoder();
//    }

 //   @Bean
//    public UserDetailsManager users(DataSource dataSource) {
//    	UserDetails user = User.builder()
//    			.username("user")
//    			.password("{bcrypt}$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW")
//    			.roles("USER")
//    			.build();
//		UserDetails admin = User.builder()
//			.username("admin")
//			.password(passwordEncoder().encode("admin"))
//			.roles("USER", "ADMIN")
//    			.build();
//    	UserDetails tester = User.builder()
//		.username("tester0001")
//		.password(passwordEncoder().encode("tester0001"))
//		.roles("TESTER")
//		.build();
    	
//    	JdbcUserDetailsManager users = new JdbcUserDetailsManager(dataSource);
 //   	return users;
 //   		users.createUser(miyakemusic);
 //   		users.createUser(tester);
//		return jdbcUserDetailsManager;
//    }
}
