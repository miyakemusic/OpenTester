package org.opentester;

import org.opentester.dto.UserDto;
import org.opentester.entity.AuthorityEntity;
import org.opentester.entity.UserEntity;
import org.opentester.repository.AuthorityRepository;
import org.opentester.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import lombok.Data;

@Service
public class MyUserDetailsService implements UserDetailsService {

	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private AuthorityRepository authorityRepository;
	
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		if (!userRepository.existsByUsername(username) ) {
			throw new UsernameNotFoundException(username);
		}
		UserEntity user = userRepository.findByUsername(username);
		return new MyUserDetails(user);
	}

	public void createUser(UserDto user) throws Exception {
		if (userRepository.existsByUsername(user.getUsername())) {
			throw new UserExistsException();
		}
		UserEntity userEntity = UserEntity.fromDto(user);//new UserEntity();

		final UserEntity ue = userRepository.save(userEntity);
		user.getAuthorities().forEach(a -> {
			AuthorityEntity authEntity = new AuthorityEntity();
			authEntity.setUserEntity(ue);
			authEntity.setAuthority("ROLE_" + a);
			authorityRepository.save(authEntity);
		});
//		user.getAuthorities().forEach(e -> {
//			AuthorityEntity auth = new AuthorityEntity(ue.getId(), e);
//			authorityRepository.save(auth);
//		});
	}

	public boolean userExists(String username) {
		return userRepository.existsByUsername(username);
	}

	public void deleteUser(String username) {
		Long id = this.userRepository.findByUsername(username).getId();
		this.userRepository.deleteByUsername(username);
//		this.authorityRepository.deleteByUser(id);
	}

	public boolean exists(String username) {
		return this.userRepository.existsByUsername(username);
	}
	
}
