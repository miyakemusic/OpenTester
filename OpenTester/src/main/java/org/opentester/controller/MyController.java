package org.opentester.controller;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.opentester.MyUserDetailsService;
import org.opentester.UserInfoThymeleaf;
import org.opentester.VerificationCodeManager;
import org.opentester.dto.UserDto;
import org.opentester.entity.AuthorityEntity;
import org.opentester.entity.UserEntity;
import org.opentester.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.MailException;
import org.springframework.mail.MailSender;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.provisioning.JdbcUserDetailsManager;
import org.springframework.security.provisioning.UserDetailsManager;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.security.crypto.password.PasswordEncoder;

@Controller
public class MyController {
	
	@Autowired
	private MailSender mailSender;

    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private VerificationCodeManager verificationCodeManager;
      
    @Autowired
    private MyUserDetailsService userDetailsManager;

    @Autowired
    private PasswordEncoder passwordEncoder;
    
    @Autowired
    private UserEmailSender userEmailSender;
    
    public MyController() { 
    }
    
	@GetMapping("/signup")
	public String signup(Model model) {
		model.addAttribute("title", "Sing up to OpenTester");
		model.addAttribute("resource", "/signup");
		
		return "sendemail";
	}
	
	@GetMapping("/resetpassword")
	public String resetPassword(Model model, String code) {
		model.addAttribute("title", "Reset password");
		model.addAttribute("resource", "/resetpassword");
		
		UserDto userDto = new UserDto();
		String username = verificationCodeManager.findUser(code);
		userDto.setCode(code);
		userDto.setUsername(username);
		
	    model.addAttribute("user", userDto);
	    model.addAttribute("onlyPassword", false);
		return "sendemail";
	}
	
	@GetMapping("/doresetpassword")
	public String doResetPassword(Model model, String code) {
		String username = verificationCodeManager.findUser(code);
		UserDto userDto = new UserDto();
		userDto.setCode(code);		
		userDto.setUsername(username);
		model.addAttribute("user", userDto);
		model.addAttribute("onlyPassword", true);	
		model.addAttribute("resource", "/doresetpassword");
//		UserEntity ue = this.userRepository.findByUsername(username);
		return "userregistration";
	}
	
	@PostMapping("/doresetpassword")
	public String postResetPassword(Model model, UserDto user) {
		if (user.isPasswordMatched()) {
			UserEntity ue = this.userRepository.findByUsername(user.getUsername());
			ue.setPassword(this.passwordEncoder.encode(user.getPassword()));
			this.userRepository.save(ue);
			return "login";
		}
		model.addAttribute("passwordNotMatch", true);
		return doResetPassword(model, user.getCode());
	}
	
	@GetMapping("/userregistration")
	public String getUserregistration(Model model, String code) {
		UserDto userDto = new UserDto();
		userDto.setCode(code);
		String username = verificationCodeManager.findUser(code);
		
		if (!username.isEmpty()) {
		    userDto.setUsername(username);
		    model.addAttribute("user", userDto);
		    model.addAttribute("onlyPassword", false);
		    model.addAttribute("resource", "/userregistration");
			return "userregistration";
		}
		else {
			return "index";
		}
	}
	
	@PostMapping("/userregistration")
	public String userregistration(Model model, UserDto userDto) {
		if (userDto.isPasswordMatched()) {
			userDto.roles("USER","ADMIN");
			userDto.setPassword(passwordEncoder.encode(userDto.getPassword()));
	    	try {
				userDetailsManager.createUser(userDto);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}	
			return "login";
		}

		userDto.setPassword("");
		userDto.setMatchingPassword("");
	    model.addAttribute("user", userDto);
	    model.addAttribute("passwordNotMatch", true);
	    model.addAttribute("resource", "/userregistration");
		return "userregistration";
	}
	
	@GetMapping("/admin/users")
	public String users(Model model) {
		List<UserInfoThymeleaf> info = new ArrayList<>();
		List<UserEntity> users = userRepository.findAll();
		int i = 1;
		for (UserEntity user: users) {
			String authorities = "";
			for (AuthorityEntity auth : user.getAuthorities()) {
				authorities += auth.getAuthority() + ",";
			}
			info.add(new UserInfoThymeleaf(i++, user.getUsername(), authorities));
		}
		
		model.addAttribute("userlist", info);
		return "users";
	}

	@GetMapping("/admin/addusers")
	public String addUsers(Model model) {
	
		return "addusers";
	}
	
	@PostMapping("/signup")
	public String signup(@ModelAttribute UserDto user, Model model) throws UnknownHostException {
		String subject = "OpenTester Sign up";
		userEmailSender.sendEmail(user, model, subject, "Click here to sign up", "userregistration");	
		return "sendemail";
	}

	
	@PostMapping("/resetpassword")
	public String resetpassword(@ModelAttribute UserDto user, Model model, String resource) throws UnknownHostException {
		String subject = "Password Reset";
		userEmailSender.sendEmail(user, model, subject, "Click here to reset password", "doresetpassword");
		model.addAttribute("sentemail", true);
		return "sendemail";
	}
}

