package org.opentester;

import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import lombok.Data;
import net.bytebuddy.utility.RandomString;

public class VerificationCodeManager {
	private Map<String/*email*/, TempCode> codes = new HashMap<>();
	private long validPeriod = 10/*min*/ * 60 /*sec*/ * 1000;
	
	public VerificationCodeManager() {
		new Thread() {
			@Override
			public void run() {
				while(true) {
					long now = Calendar.getInstance().getTimeInMillis();
					Set<String> expired = new HashSet<>();
					for (Map.Entry<String, TempCode> c : codes.entrySet()) {
						if ( (now - c.getValue().getTimeInMillis()) > validPeriod) {
							expired.add(c.getKey());
							System.out.println(c.getKey() + "was expired");
						}
					}
					expired.forEach(codes::remove);
					try {
						Thread.sleep(10*1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		}.start();
	}
	
	public String generateCode(String email) {
		
		String code = RandomString.make(64);
		codes.put(email, new TempCode(code, Calendar.getInstance().getTimeInMillis()));
		return code;
	}

	public String findUser(String code) {
		for (Map.Entry<String, TempCode> c : codes.entrySet()) {
			if (c.getValue().getCode().equals(code)) {
				return c.getKey();
			}
		}
		return "";
	}

	public String findCode(String user) {
		return this.codes.get(user).getCode();
	}
	
	public int size() {
		return this.codes.size();
	}

	public void clear() {
		this.codes.clear();
	}
	
	
}
@Data
class TempCode {
	public TempCode(String code2, long timeInMillis) {
		this.code = code2;
		this.timeInMillis = timeInMillis;
	}
	private String code;
	private Long timeInMillis;
}