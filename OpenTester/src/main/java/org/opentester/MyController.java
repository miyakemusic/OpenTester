package org.opentester;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.MailException;
import org.springframework.mail.MailSender;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.provisioning.JdbcUserDetailsManager;
import org.springframework.security.provisioning.UserDetailsManager;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.security.crypto.password.PasswordEncoder;

@Controller
public class MyController {
	
    private final MailSender mailSender;

    @Autowired
    private UserCrudRepository userJpaRepository;
    
    @Autowired
    private VerificationCodeManager verificationCodeManager;
    
    @Autowired
    private PasswordEncoder passwordEncoder;
  
    @Autowired
    private UserDetailsManager userDetailsManager;

    public MyController(MailSender mailSender) { 
        this.mailSender = mailSender;
    }
    
	@GetMapping("/signup")
	public String signup() {
		return "signup";
	}
	
	@GetMapping("/userregistration")
	public String getUserregistration(Model model, String code) {
		UserDto userDto = new UserDto();
		userDto.setCode(code);
		String username = verificationCodeManager.findUser(code);
		
		if (!username.isEmpty()) {
		    userDto.setUsername(username);
		    model.addAttribute("user", userDto);
			return "userregistration";
		}
		else {
			return "index";
		}
	}
	
	@PostMapping("/userregistration")
	public String userregistration(Model model, UserDto userDto) {
		if (!userDto.isPasswordMatched()) {
		    model.addAttribute("user", userDto);
			return "userregistration";
		}
		
    	UserDetails newUser = User.builder()
			.username(userDto.getUsername())
			.password(passwordEncoder.encode(userDto.getPassword()))
			.roles("USER")
			.build();
    	userDetailsManager.createUser(newUser);
    	
		return "index";
	}
	
	@GetMapping("/admin/users")
	public String users(Model model) {
		List<UserInfoThymeleaf> info = new ArrayList<>();
		Iterable<Users> users = userJpaRepository.findAll();
		int i = 1;
		for (Users user: users) {
			String authorities = "";
			for (Authorities auth : user.getAuthorities()) {
				authorities += auth.getAuthority() + "\n";
			}
			info.add(new UserInfoThymeleaf(i++, user.getUsername(), authorities));
		}
		
		model.addAttribute("userlist", info);
		return "users";
	}

		
	@PostMapping("/signup")
	public String signup(@ModelAttribute Users user, Model model) {
		model.addAttribute("sentemail", "true");
		
        SimpleMailMessage msg = new SimpleMailMessage();
        msg.setFrom("opentestersignup@gmail.com");
        msg.setTo(user.getUsername());
//        msg.setCc();
//        msg.setBcc();
        msg.setSubject("OpenTester Sign up");    
        
        String code = verificationCodeManager.generateCode(user.getUsername());
        
        
        try {
			InetAddress addr = InetAddress.getLocalHost();
			String hostName = addr.getHostAddress();
			String html = "<html><body><a href=\"http://" + hostName + ":8080/userregistration?code=" + code + 
					"\">Click here to sign up</a></body></html>";
			
	        msg.setText(html);
	        //msg.setText("<html><body><a href=\"http://localhohst:8080/userregistration\" /></body></html>");

	        try {
	            mailSender.send(msg);
	        } catch (MailException e) {
	            e.printStackTrace();
	        }	
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}
        
		return "signup";
  }
}

