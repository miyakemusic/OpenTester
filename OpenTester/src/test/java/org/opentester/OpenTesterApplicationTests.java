package org.opentester;

import org.aspectj.lang.annotation.Before;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
//import org.springframework.boot.test.context.TestConfiguration;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.request;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;

import java.net.UnknownHostException;
import java.util.Collection;
import java.util.HashMap;
//import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Iterator;
import java.util.Map;

import org.opentester.controller.MyController;
import org.opentester.dto.UserDto;
import org.opentester.entity.UserEntity;
import org.opentester.repository.AuthorityRepository;
import org.opentester.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.mail.MailException;
import org.springframework.mail.MailSender;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.ui.Model;


@SpringBootTest
@ActiveProfiles("test")
class OpenTesterApplicationTests {
	private MockMvc mockMvc;
    
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	@Autowired
	private MyUserDetailsService myUserDetailsService;
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private  AuthorityRepository authorityRepository;
	
	@Test
	void testUserDB() {
		MyUserDetailsService service = myUserDetailsService;//new MyUserDetailsService();
		try {
			service.createUser(UserDto.builder().username("testuser").password(passwordEncoder.encode("password")).
					roles("USER","ADMIN").firstname("firstname").lastname("lastname").build());
			UserDetails userDetails = service.loadUserByUsername("testuser");
			
			
			assertTrue(userDetails.getUsername().equals("testuser"));
			assertTrue(1 == userRepository.findAll().size());
			Iterator<? extends GrantedAuthority> it = userDetails.getAuthorities().iterator();
			assertTrue(it.next().getAuthority().equals("ROLE_USER"));
			assertTrue(it.next().getAuthority().equals("ROLE_ADMIN"));
			
			UserEntity userEntity = userRepository.findByUsername("testuser");
			assertEquals("testuser", userEntity.getUsername());
			assertNotEquals("password", userEntity.getPassword());
			
			assertEquals("ROLE_USER", userEntity.getAuthorities().get(0).getAuthority());
			assertEquals("ROLE_ADMIN", userEntity.getAuthorities().get(1).getAuthority());
			
			UserDto ud = UserDto.fromEntity(userEntity);
			assertEquals("testuser", ud.getUsername());
			assertEquals("USER", ud.getAuthorities().get(0));
			assertEquals("ADMIN", ud.getAuthorities().get(1));
			
			service.deleteUser("testuser");
			assertTrue(!service.exists("testuser"));
			
			assertTrue(0 == userRepository.findAll().size());
			assertTrue(0 == authorityRepository.findAll().size());
			
		} catch (Exception e) {
			assertTrue(false);
		}
	}

	@Autowired
	private MyController controller;
	
	static private SimpleMailMessage message;
	
	@TestConfiguration
	static class TestConfig {
		
		@Bean
		public MailSender mailSender() {
			return new MailSender() {
				@Override
				public void send(SimpleMailMessage simpleMessage) throws MailException {
					message = simpleMessage;
				}

				@Override
				public void send(SimpleMailMessage... simpleMessages) throws MailException {
					// TODO Auto-generated method stub
					
				}
			};
		}
	}
	
	private Map<String, Object> attrs = new HashMap<>();
//	@Test
	void testSigninController() throws UnknownHostException {
		Model model = new Model() {
			
			@Override
			public Model addAttribute(String attributeName, Object attributeValue) {
				attrs.put(attributeName, attributeValue);
				return this;
			}

			@Override
			public Model addAttribute(Object attributeValue) {
				// TODO Auto-generated method stub
				return this;
			}

			@Override
			public Model addAllAttributes(Collection<?> attributeValues) {
				// TODO Auto-generated method stub
				return this;
			}

			@Override
			public Model addAllAttributes(Map<String, ?> attributes) {
				// TODO Auto-generated method stub
				return this;
			}

			@Override
			public Model mergeAttributes(Map<String, ?> attributes) {
				// TODO Auto-generated method stub
				return this;
			}

			@Override
			public boolean containsAttribute(String attributeName) {
				return attrs.containsKey(attributeName);
			}

			@Override
			public Object getAttribute(String attributeName) {
				return attrs.get(attributeName);
			}

			@Override
			public Map<String, Object> asMap() {
				return attrs;
			}
			
		};
		
		String html = controller.signup(UserDto.builder().username("aaaa@bbb.com").build(), model);
		
		assertEquals("aaaa@bbb.com", message.getTo()[0]);
		
//		assertEquals("", attrs.get(""));
//		assertEquals("", message.getSubject());
	}
	

	
	@Autowired
	private MyController formController;
	
    @BeforeEach
    public void setup() {
        mockMvc = MockMvcBuilders.standaloneSetup(formController).build();
        verificationCodeManager.clear();
    }
    
    @Autowired
    VerificationCodeManager verificationCodeManager;
    
    @Test
    void testPostForm() throws Exception {
    	assertEquals(0, verificationCodeManager.size());
    	
    	
    	mockMvc.perform(
    			MockMvcRequestBuilders.post("/signup/").param("username","aaaa@bbb.com")
    			);
    	
    	String code = verificationCodeManager.findCode("aaaa@bbb.com");
    	assertTrue(message.getText().contains(code));
    }
    
}
